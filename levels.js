// Game levels for SQL Beats
const levels = [
  {
    id: 1,
    title: "The Rookie Manager",
    description: "Welcome to SQL Beats! As a new manager, your first task is to get familiar with the artists signed to the label.",
    task: "List all artists signed to the label.",
    hint: "Use the SELECT statement to retrieve data from the Artists table.",
    solution: "SELECT name FROM Artists;",
    reward: "guitar-riff.mp3",
    tableHints: ["Artists"],
    difficulty: "Easy",
    conceptsIntroduced: ["SELECT statement", "Basic querying"]
  },
  {
    id: 2,
    title: "Genre Explorer",
    description: "Let's dive deeper into our roster. We need to understand what genres our artists represent.",
    task: "List all artists with their respective genres.",
    hint: "Use SELECT with multiple columns.",
    solution: "SELECT name, genre FROM Artists;",
    reward: "bass-line.mp3",
    tableHints: ["Artists"],
    difficulty: "Easy",
    conceptsIntroduced: ["Selecting multiple columns"]
  },
  {
    id: 3,
    title: "Rock Stars Only",
    description: "The marketing team wants to run a special rock music promotion.",
    task: "Find all artists who are in the 'Rock' genre.",
    hint: "Use the WHERE clause to filter results based on the genre column.",
    solution: "SELECT name FROM Artists WHERE genre = 'Rock';",
    reward: "rock-guitar.mp3",
    tableHints: ["Artists"],
    difficulty: "Easy",
    conceptsIntroduced: ["WHERE clause", "Filtering data"]
  },
  {
    id: 4,
    title: "Recent Releases",
    description: "We need to review our recent album releases for the quarterly report.",
    task: "List all albums released after 2020, showing the title and release year.",
    hint: "Use the WHERE clause with a comparison operator on the release_year column.",
    solution: "SELECT title, release_year FROM Albums WHERE release_year > 2020;",
    reward: "drum-roll.mp3",
    tableHints: ["Albums"],
    difficulty: "Easy",
    conceptsIntroduced: ["Comparison operators"]
  },
  {
    id: 5,
    title: "Tour Planner",
    description: "Time to plan the next concert tour! We need to find suitable venues.",
    task: "Find all venues with a capacity greater than 15000, showing the venue name, city, and capacity.",
    hint: "Use the SELECT and WHERE clauses on the Venues table.",
    solution: "SELECT name, city, capacity FROM Venues WHERE capacity > 15000;",
    reward: "crowd-cheer.mp3",
    tableHints: ["Venues"],
    difficulty: "Medium",
    conceptsIntroduced: ["Numeric comparisons"]
  },
  {
    id: 6,
    title: "Album Inspector",
    description: "We need to see which artists created which albums for our catalog update.",
    task: "List all albums with their artist names, showing album title and artist name.",
    hint: "You'll need to JOIN the Artists and Albums tables using the artist_id as the connector.",
    solution: "SELECT Albums.title, Artists.name FROM Albums JOIN Artists ON Albums.artist_id = Artists.id;",
    reward: "synth-melody.mp3",
    tableHints: ["Albums", "Artists"],
    difficulty: "Medium",
    conceptsIntroduced: ["JOIN clause", "Relating tables"]
  },
  {
    id: 7,
    title: "Concert Revenue",
    description: "The finance team needs information about our most profitable concerts.",
    task: "Calculate the total revenue for each concert (ticket_price * tickets_sold), showing concert_date, venue name, and total revenue.",
    hint: "Use a JOIN between Concerts and Venues tables and calculate the revenue with an arithmetic expression.",
    solution: "SELECT Concerts.concert_date, Venues.name, (Concerts.ticket_price * Concerts.tickets_sold) AS total_revenue FROM Concerts JOIN Venues ON Concerts.venue_id = Venues.id;",
    reward: "cash-register.mp3",
    tableHints: ["Concerts", "Venues"],
    difficulty: "Medium",
    conceptsIntroduced: ["Calculated fields", "Arithmetic operations", "Column aliases"]
  },
  {
    id: 8,
    title: "Sales Analyzer",
    description: "Let's analyze album sales to see which albums are performing best in different countries.",
    task: "Find the total units sold for each album, grouped by country, showing album title, country, and total units.",
    hint: "You'll need to JOIN Albums and Sales tables, then use GROUP BY to aggregate the data by country and album.",
    solution: "SELECT Albums.title, Sales.country, SUM(Sales.units_sold) AS total_units FROM Sales JOIN Albums ON Sales.album_id = Albums.id GROUP BY Albums.title, Sales.country;",
    reward: "electronic-beat.mp3",
    tableHints: ["Sales", "Albums"],
    difficulty: "Hard",
    conceptsIntroduced: ["GROUP BY clause", "SUM() function", "Aggregation"]
  },
  {
    id: 9,
    title: "Top Performers",
    description: "The executive team wants a report on our top selling artists.",
    task: "Rank artists by their total album sales, showing artist name and total units sold, with the highest sales first.",
    hint: "You'll need to JOIN Artists, Albums, and Sales tables, then use GROUP BY with SUM() and ORDER BY to sort the results.",
    solution: "SELECT Artists.name, SUM(Sales.units_sold) AS total_sales FROM Artists JOIN Albums ON Artists.id = Albums.artist_id JOIN Sales ON Albums.id = Sales.album_id GROUP BY Artists.name ORDER BY total_sales DESC;",
    reward: "applause.mp3",
    tableHints: ["Artists", "Albums", "Sales"],
    difficulty: "Hard",
    conceptsIntroduced: ["ORDER BY clause", "Multiple joins", "Sorting results"]
  },
  {
    id: 10,
    title: "Chart Topper",
    description: "Final challenge! We need to find which artist had the highest sales in a single week.",
    task: "Find the artist name, album title, week starting date, and units sold for the highest single-week album sales record.",
    hint: "You'll need to JOIN Artists, Albums, and Sales tables, then use ORDER BY and LIMIT to find the top result.",
    solution: "SELECT Artists.name, Albums.title, Sales.week_starting, Sales.units_sold FROM Artists JOIN Albums ON Artists.id = Albums.artist_id JOIN Sales ON Albums.id = Sales.album_id ORDER BY Sales.units_sold DESC LIMIT 1;",
    reward: "victory-fanfare.mp3",
    tableHints: ["Artists", "Albums", "Sales"],
    difficulty: "Hard",
    conceptsIntroduced: ["LIMIT clause", "Complex queries", "Data analysis"]
  },
  {
    id: 11,
    title: "Genre Popularity",
    description: "The marketing team wants to know which genres are most popular in different countries.",
    task: "Find the total sales for each genre in each country, showing genre, country, and total units sold, ordered by total sales descending.",
    hint: "You'll need to JOIN Artists, Albums, and Sales tables, then use GROUP BY with multiple columns.",
    solution: "SELECT Artists.genre, Sales.country, SUM(Sales.units_sold) AS total_sales FROM Artists JOIN Albums ON Artists.id = Albums.artist_id JOIN Sales ON Albums.id = Sales.album_id GROUP BY Artists.genre, Sales.country ORDER BY total_sales DESC;",
    reward: "genre-mix.mp3",
    tableHints: ["Artists", "Albums", "Sales"],
    difficulty: "Hard",
    conceptsIntroduced: ["Multi-column GROUP BY", "Complex aggregations"]
  },
  {
    id: 12,
    title: "Concert Season",
    description: "We need to analyze our concert performance across different seasons.",
    task: "Find the average ticket price and total revenue for concerts in each season (Spring, Summer, Fall, Winter), based on the concert date.",
    hint: "Use CASE statements to categorize dates into seasons and calculate averages.",
    solution: "SELECT CASE WHEN strftime('%m', concert_date) IN ('03', '04', '05') THEN 'Spring' WHEN strftime('%m', concert_date) IN ('06', '07', '08') THEN 'Summer' WHEN strftime('%m', concert_date) IN ('09', '10', '11') THEN 'Fall' ELSE 'Winter' END AS season, AVG(ticket_price) AS avg_ticket_price, SUM(ticket_price * tickets_sold) AS total_revenue FROM Concerts GROUP BY season ORDER BY total_revenue DESC;",
    reward: "seasonal-mix.mp3",
    tableHints: ["Concerts"],
    difficulty: "Hard",
    conceptsIntroduced: ["CASE statements", "Date functions", "Advanced aggregations"]
  },
  {
    id: 13,
    title: "Album Evolution",
    description: "Let's analyze how our artists' album sales have evolved over time.",
    task: "For each artist, find their first and most recent album release years, and the total sales difference between their first and most recent albums.",
    hint: "Use subqueries to find first and recent albums, then calculate the difference in sales.",
    solution: "SELECT a.name, MIN(al.release_year) AS first_album_year, MAX(al.release_year) AS recent_album_year, (SELECT SUM(s.units_sold) FROM Sales s JOIN Albums al2 ON s.album_id = al2.id WHERE al2.artist_id = a.id AND al2.release_year = MAX(al.release_year)) - (SELECT SUM(s.units_sold) FROM Sales s JOIN Albums al2 ON s.album_id = al2.id WHERE al2.artist_id = a.id AND al2.release_year = MIN(al.release_year)) AS sales_difference FROM Artists a JOIN Albums al ON a.id = al.artist_id GROUP BY a.id, a.name;",
    reward: "evolution-mix.mp3",
    tableHints: ["Artists", "Albums", "Sales"],
    difficulty: "Expert",
    conceptsIntroduced: ["Subqueries", "Complex calculations", "Temporal analysis"]
  },
  {
    id: 14,
    title: "Venue Performance",
    description: "We need to analyze which venues consistently perform well.",
    task: "Find venues that have hosted more than 5 concerts with an average attendance rate (tickets_sold/capacity) above 80%.",
    hint: "Use HAVING clause to filter aggregated results.",
    solution: "SELECT v.name, COUNT(*) AS total_concerts, AVG(c.tickets_sold * 100.0 / v.capacity) AS avg_attendance_rate FROM Venues v JOIN Concerts c ON v.id = c.venue_id GROUP BY v.id, v.name HAVING COUNT(*) > 5 AND AVG(c.tickets_sold * 100.0 / v.capacity) > 80 ORDER BY avg_attendance_rate DESC;",
    reward: "venue-mix.mp3",
    tableHints: ["Venues", "Concerts"],
    difficulty: "Expert",
    conceptsIntroduced: ["HAVING clause", "Percentage calculations", "Advanced filtering"]
  },
  {
    id: 15,
    title: "Artist Growth",
    description: "Let's analyze which artists have shown the most consistent growth in sales.",
    task: "Find artists whose album sales have increased every year, showing their name and the number of consecutive years of growth.",
    hint: "Use window functions to analyze year-over-year growth.",
    solution: "WITH yearly_sales AS (SELECT a.name, al.release_year, SUM(s.units_sold) AS total_sales FROM Artists a JOIN Albums al ON a.id = al.artist_id JOIN Sales s ON al.id = s.album_id GROUP BY a.id, a.name, al.release_year), growth_check AS (SELECT name, release_year, total_sales, LAG(total_sales) OVER (PARTITION BY name ORDER BY release_year) AS prev_year_sales FROM yearly_sales) SELECT name, COUNT(*) AS years_of_growth FROM growth_check WHERE total_sales > prev_year_sales OR prev_year_sales IS NULL GROUP BY name HAVING COUNT(*) = (SELECT COUNT(DISTINCT release_year) FROM yearly_sales y2 WHERE y2.name = growth_check.name);",
    reward: "growth-mix.mp3",
    tableHints: ["Artists", "Albums", "Sales"],
    difficulty: "Expert",
    conceptsIntroduced: ["Window functions", "Common Table Expressions (CTEs)", "Advanced analytics"]
  }
];

module.exports = levels; 